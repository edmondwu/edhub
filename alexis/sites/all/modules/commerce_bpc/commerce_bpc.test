<?php
/**
 * @file
 * Tests for Commerce bulk product creation
 */
class CommerceBpcTestCase extends CommerceBaseTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Commerce bulk product creation',
      'description' => 'Test the Commerce bulk product creation functionality.',
      'group' => 'Commerce (contrib)',
    );
  }

  protected $product_type = NULL;
  protected $list_field_one = NULL;
  protected $list_field_two = NULL;
  protected $store_admin = NULL;

  function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_bpc'));
    parent::setUp($modules);

    $this->store_admin = $this->createStoreAdmin();

    $this->product_type = $this->createDummyProductType();

    $this->drupalLogin($this->store_admin);
  }
  /**
   * Test the correct creation of 2x3 combinations.
   */
  function testTwoFieldsTwoListValues() {
    $fields = array();
    $field = $this->attachNewListField($this->product_type, 2);
    $fields[$field['field_name']] = array_keys($field['settings']['allowed_values']);
    $field = $this->attachNewListField($this->product_type, 3);
    $fields[$field['field_name']] =     array_keys($field['settings']['allowed_values']);

    $price = rand(2, 500);
    $sku_fragment = $this->randomName(5);

    $params = array(
      'sku_fragment' => $sku_fragment,
      'title_fragment' => $this->randomName(10),
      'commerce_price[' . LANGUAGE_NONE . '][0][amount]' => $price,
      'static_values[status]' => 1,
    );
    foreach ($fields as $name => $vals) {
      foreach ($vals as $val) {
          $params['combinations[' . $name . '][' . LANGUAGE_NONE . '][' . $val . ']'] = TRUE;
      }
    }

    $bulk_url = 'admin/commerce/products/add-bulk/' ;
    $bulk_url .= $this->product_type['type'];
    $this->drupalPost($bulk_url, $params, t('Create products'));

    $this->assertCorrectPermutationsExist(
      $fields,
      "All permutations of two fields have been created exactly once."
    );

    $n = $this->getNumberOfProductsWithFieldValues();
    $this->assertEqual($n, 6, 'No other product was created.');

    $attributes = array(
      'commerce_price' => array(
        'field' => 'commerce_price',
        // the price is stored in nondecimal form, hence we need to multiply
        'value' => $price*100,
        'column' => 'amount'
      ),
    );
    $n = $this->getNumberOfProductsWithFieldValues($attributes);

    $this->assertEqual($n, 6, "All created products have the correct price.");

    $active_products = commerce_product_load_multiple(FALSE, array('status' => 1));
    $this->assertEqual(count($active_products), 6, "All created products have are active.");

  }
  /**
   * Attach a new list field with the given number of options to a product
   * type.
   *
   * @param $product_type
   *  An array representing the product type to which the field should
   *  be attached.
   *
   * @return
   *   An array containing the field specification of the new field.
   */
  protected function attachNewListField($product_type, $no_options = 2) {
    $field_name = drupal_strtolower($this->randomName() . '_field_name');
    $values = array();
    for ($i=0; $i < $no_options; $i++) {
      $values[$this->randomName(6) . 'val' . $i] = $this->randomString(10);
    }
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_text',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => $values,
      ),
    );
    $field = field_create_field($field);
    $field_id = $field['id'];
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_product',
      'bundle' => $product_type['type'],
      'label' => $this->randomName() . '_label',
      'description' => $this->randomName() . '_description',
      'weight' => mt_rand(0, 127),
      'settings' => array(
      ),
      'widget' => array(
        'type' => 'test_field_widget',
        'label' => 'Test Field',
        'settings' => array(
          'test_widget_setting' => $this->randomName(),
        )
      )
    );
    $instance = field_create_instance($instance);
    return $field;
  }
  protected function assertCorrectPermutationsExist($parameters = array(), $text) {
    $combinations = $this->generatePermutations($parameters);
    $count = 0;
    foreach ($combinations as $combination) {
      $attributes = array();
      foreach ($combination as $field => $value) {
        $attributes[] = array(
          'field' => $field,
          'value' => $value,
        );
      }
      if ($this->getNumberOfProductsWithFieldValues($attributes) == 1) {
        $count++;
      }
    }
    $this->assertEqual($count, count($combinations), $text);
  }
  /**
   * Determine how many products exist with the provided field values.
   *
   * @param $attributes
   *  An array of associative arrays with the following keys, each specifying
   *  one field condition.
   *  - 'field': The name of the field.
   *  - 'column': The column of the field, as in
   *    EntityFieldQuery::entityCondition (optional, defaults to 'value').
   *  - 'value': The value to test for.
   */
  function getNumberOfProductsWithFieldValues($attributes = array()) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'commerce_product', '=')
      ->entityCondition('bundle', $this->product_type['type'], '=');
      foreach ($attributes as $attr) {
        $attr += array('column' => 'value');
        $query = $query->fieldCondition($attr['field'], $attr['column'], $attr['value']);
      }
    $query->count();
    return $query->execute();
  }
}